# -*- coding: utf8 -*-

#TODO
# - [] Coindar

# –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π
from utils import *

# –î—Ä—É–≥–∏–µ –ª–∏–±—ã
import sqlite3

# –õ–∏–±—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–ª–µ–≥–æ–π
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, user
from aiogram.dispatcher import FSMContext

#CONST
from config import botToken

#–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥
async def set_bot_commands(dp):
    commands = [
        types.BotCommand(command="price", description="[—Ç–∏–∫–µ—Ä –º–æ–Ω–µ—Ç—ã] ‚Äî —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞"),
        types.BotCommand(command="change", description="[—Ç–∏–∫–µ—Ä –º–æ–Ω–µ—Ç—ã] ‚Äî –∏–∑–º–µ–Ω–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –º–æ–Ω–µ—Ç—ã –∑–∞ 24 —á–∞—Å–∞"),
        types.BotCommand(command="list", description="—Å–≤–æ–¥–∫–∞ –æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –º–æ–Ω–µ—Ç–∞—Ö"),
        types.BotCommand(command="add", description="[—Ç–∏–∫–µ—Ä –º–æ–Ω–µ—Ç—ã] ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –º–æ–Ω–µ—Ç—É –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"),
        types.BotCommand(command="remove", description="[—Ç–∏–∫–µ—Ä –º–æ–Ω–µ—Ç—ã] ‚Äî —É–¥–∞–ª–∏—Ç—å –º–æ–Ω–µ—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"),
        types.BotCommand(command="bubbles", description="–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä—ã–Ω–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é"),
        types.BotCommand(command="mood", description="–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ä—ã–Ω–∫–∞ –Ω–∞ –±–∞–∑–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ Bitcoin Rainbow Price Chart "),
        types.BotCommand(command="explorer", description="[–∞–¥—Ä–µ—Å—Å BTC –∫–æ—à–µ–ª—å–∫–∞] - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—à–µ–ª—å–∫–µ –∏ QR –∫–æ–¥"),
        types.BotCommand(command="altindex", description="–∏–Ω–¥–µ–∫—Å —Å–µ–∑–æ–Ω–∞ –∞–ª—å—Ç–∫–æ–∏–Ω–æ–≤"),
        types.BotCommand(command="fear", description="–∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏"),
        types.BotCommand(command="help", description="—Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"),
        types.BotCommand(command="gas", description="—Ü–µ–Ω—ã –Ω–∞ gas eth"),
        types.BotCommand(command="signal", description="[—Ç–∏–∫–µ—Ä –º–æ–Ω–µ—Ç—ã] [h/d/w/m] - —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞"),
        types.BotCommand(command="advsignal", description="[—Ç–∏–∫–µ—Ä –º–æ–Ω–µ—Ç—ã] [h/d/w/m] - –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞"),
        types.BotCommand(command="profile", description="–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –º–æ–Ω–µ—Ç –∏ –¥—Ä—É–≥–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ"),
    ]
    await dp.bot.set_my_commands(commands)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
connect = sqlite3.connect('coins.db')
cursor = connect.cursor()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token = botToken)
dp = Dispatcher(bot)

# –õ–æ–≥–∏–∫–∞ –±–æ—Ç–∞
@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message, state: FSMContext):
    cursor.execute("""CREATE TABLE IF NOT EXISTS u{}(
        ticker TEXT
    )""".format(message.from_user.id))
    connect.commit()
    cursor.execute("SELECT * FROM u{}".format(message.from_user.id))
    coins = cursor.fetchall()
        
    await set_bot_commands(dp)
    await message.answer("–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É—é /help \n–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ GitHub - github.com/Forwall100/cryptanalyst_bot")


@dp.message_handler(commands="help")
async def send_help(message: types.Message):
    await message.answer('/price [—Ç–∏–∫–µ—Ä –º–æ–Ω–µ—Ç—ã] ‚Äî —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ \n /change [—Ç–∏–∫–µ—Ä –º–æ–Ω–µ—Ç—ã] ‚Äî –∏–∑–º–µ–Ω–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –º–æ–Ω–µ—Ç—ã –∑–∞ 24 —á–∞—Å–∞ \n /list ‚Äî —Å–≤–æ–¥–∫–∞ –æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –º–æ–Ω–µ—Ç–∞—Ö \n /add [—Ç–∏–∫–µ—Ä –º–æ–Ω–µ—Ç—ã] ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –º–æ–Ω–µ—Ç—É –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è \n /remove [—Ç–∏–∫–µ—Ä –º–æ–Ω–µ—Ç—ã] ‚Äî —É–¥–∞–ª–∏—Ç—å –º–æ–Ω–µ—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è \n /bubbles - –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä—ã–Ω–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é \n /mood - –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ä—ã–Ω–∫–∞ –Ω–∞ –±–∞–∑–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ Bitcoin Rainbow Price Chart \n /explorer [–∞–¥—Ä–µ—Å—Å BTC –∫–æ—à–µ–ª—å–∫–∞] - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—à–µ–ª—å–∫–µ –∏ QR –∫–æ–¥ \n /altindex - –ò–Ω–¥–µ–∫—Å —Å–µ–∑–æ–Ω–∞ –∞–ª—å—Ç–∫–æ–∏–Ω–æ–≤ \n /fearAndGreed - –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏')


@dp.message_handler(commands="price", content_types='text')
async def send_price(message: types.Message):
    coin = message.text.replace('/price ', '')
    await message.answer(coin + ' —Å—Ç–æ–∏—Ç ' + str(round(price(coin), 4)) + '$')


@dp.message_handler(commands="change", content_types='text')
async def send_change(message: types.Message):
    coin = message.text.replace('/change ', '')
    if change24(coin) < 0:
        status = 'üìâ —É–ø–∞–ª –Ω–∞ '
    else:
        status = 'üìà –≤—ã—Ä–æ—Å –Ω–∞ '

    await message.answer(coin + status + str(abs(round(change24(coin), 3))) + '%')


@dp.message_handler(commands="list")
async def send_list(message: types.Message):
    cursor.execute("SELECT * FROM u{}".format(message.from_user.id))
    coins = cursor.fetchall()
    await message.answer('–î–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: ' + dominance())
    m = []
    await message.answer('‚è≥ –ì–æ—Ç–æ–≤–∏–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...')
    for coin in coins:
        coin = coin[0]
        if change24(coin) < 0:
            status = 'üìâ —É–ø–∞–ª –Ω–∞ '
        else:
            status = 'üìà –≤—ã—Ä–æ—Å –Ω–∞ '
        m.append('**{}**'.format(coin) + status + '`{}`'.format(str(round(abs(change24(coin)), 3)) + '%') + ' –∏ —Ç–µ–ø–µ—Ä—å —Å—Ç–æ–∏—Ç ' + '`{}`'.format(str(price(coin)) + '$') + '\n' + sum_signals(coin)[0])
    for i in m:
        await message.answer(i, parse_mode='MarkdownV2')


@dp.message_handler(commands="add", content_types='text')
async def add_coin(message: types.Message):
    cursor.execute("SELECT * FROM u{}".format(message.from_user.id))
    coins = cursor.fetchall()
    if (message.text.replace('/add ', ''),) not in coins:
        cursor.execute("INSERT INTO u{} VALUES(?);".format(message.from_user.id), [message.text.replace('/add ', '')])
        connect.commit()
        await message.answer('–î–æ–±–∞–≤–∏–ª —Ç–∏–∫–µ—Ä –≤ —Å–ø–∏—Å–æ–∫')
    else:
        await message.answer('–≠—Ç–æ—Ç —Ç–∏–∫–µ—Ä —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ')
    

@dp.message_handler(commands="remove", content_types='text')
async def remove_coin(message: types.Message):
    cursor.execute("SELECT * FROM u{}".format(message.from_user.id))
    coins = cursor.fetchall()
    if (message.text.replace('/remove ', ''),) in coins:
        cursor.execute("DELETE FROM u{} WHERE ticker = ?".format(message.from_user.id), [message.text.replace('/remove ', '')])
        connect.commit()
        await message.answer('–£–¥–∞–ª–∏–ª —Ç–∏–∫–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞')
    else:
        await message.answer('–≠—Ç–æ–≥–æ —Ç–∏–∫–µ—Ä–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ')


@dp.message_handler(commands="profile")
async def alt_answer(message: types.Message):
    cursor.execute("SELECT * FROM u{}".format(message.from_user.id))
    coins = cursor.fetchall()
    watching_coins = []
    for coin in coins:
        if coins.index(coin) + 1 == len(coins):
            watching_coins.append('‚îî `' + coin[0] + '`')
        else:
            watching_coins.append('‚îú `' + coin[0] + '`')
    await message.answer('üÜî –í–∞—à ID: {}\n\n üîé –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –º–æ–Ω–µ—Ç—ã\n{}'.format('`{}`'.format(message.from_user.id), '\n'.join(watching_coins)), parse_mode='MarkdownV2')


@dp.message_handler(commands="mood", content_types='text')
async def mood_answer(message: types.Message):
    await message.answer(mood())

@dp.message_handler(commands='admin', content_types='text')
async def server_answer(message: types.Message):
    if message.from_user.id == admin_id:
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        close = types.KeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å")
        statistic = types.KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        keyboard.add(close, statistic)
        await message.answer('–í—ã –≤–æ—à–ª–∏ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', reply_markup=keyboard)
        @dp.message_handler(content_types='text')
        async def choise_answer(message: types.Message):
            if message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
                cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
                await message.answer('üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ - ' + str(len(cursor.fetchall())))
            if message.text == '‚ùå –ó–∞–∫—Ä—ã—Ç—å':
                markup = types.ReplyKeyboardRemove()
                await message.answer('–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏', reply_markup=markup)
    else:
        await message.answer('–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä')


@dp.message_handler(commands="bubbles", content_types='text')
async def bubbles_answer(message: types.Message):
    await bot.send_photo(message.from_user.id, photo=open(bubble(), 'rb'))


@dp.message_handler(commands="fear", content_types='text')
async def mood_answer(message: types.Message):
    await message.answer(fear_and_greed_index()[0] + '\n ' + fear_and_greed_index()[1] + '\n ' + fear_and_greed_index()[2] + '\n ')


@dp.message_handler(commands="explorer", content_types='text')
async def explorer_answer(message: types.Message):
    address = message.text.replace('/explorer ', '')
    buttons = [
        types.InlineKeyboardButton(text="Blockchain", url="https://www.blockchain.com/ru/btc/address/"+address),
        types.InlineKeyboardButton(text="Intelx", url="https://intelx.io/?s="+address),
        types.InlineKeyboardButton(text="Whoiswho", url="https://bitcoinwhoswho.com/address/"+address)
    ]
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(*buttons)
    await message.answer('‚è≥ –ì–æ—Ç–æ–≤–∏–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')
    qr_code_url = btc_explorer(address)['qr_code_url']
    await message.answer('üíé Bitcoin –∞–¥—Ä–µ—Å:\n' + '`{}`'.format(address) + '\n\n' + '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ' + '`{}`'.format(str(btc_explorer(address)['tx_count'])) + '\n' + '–í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ: ' + '`{} BTC`'.format(str(btc_explorer(address)['received'])) + '\n' + '–í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ' + '`{} BTC`'.format(str(btc_explorer(address)['sent'])) + '\n' + '–ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ' + '`{}`'.format(str(btc_explorer(address)['balance'])), parse_mode='MarkdownV2', reply_markup=keyboard)
    await bot.send_photo(message.from_user.id, qr_code_url)


@dp.message_handler(commands="altindex", content_types='text')
async def alt_answer(message: types.Message):
    await message.answer('–ò–Ω–¥–µ–∫—Å –∞–ª—å—Ç—Å–µ–∑–æ–Ω–∞ —Å–µ–≥–æ–¥–Ω—è - ' + alt_index() + '%')


@dp.message_handler(commands="gas")
async def alt_answer(message: types.Message):
    fast = gas()['FastGasPrice']
    propose = gas()['ProposeGasPrice']
    slow = gas()['SafeGasPrice']
    await message.answer('üöÄ –ë—ã—Å—Ç—Ä–æ - ' + fast + ' gwei' + '\nüëå–û–±—ã—á–Ω–æ - ' + propose + ' gwei ' + '\nüê¢ –ú–µ–¥–ª–µ–Ω–Ω–æ - ' + slow + ' gwei ')


@dp.message_handler(commands="signal", content_types='text')
async def signal_answer(message: types.Message):
    ticker = message.text.replace('/signal ', '').split()[0]
    time = message.text.replace('/signal ', '').split()[1]
    await message.answer(sum_signals(ticker, time)[0] + ' –ø–æ ' + ticker)
    await message.answer('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–∏–≥–Ω–∞–ª–∞–º' + sum_signals(ticker, time)[1])


@dp.message_handler(commands="advsignal", content_types='text')
async def advsignal_answer(message: types.Message):
    ticker = message.text.replace('/advsignal ', '').split()[0]
    time = message.text.replace('/advsignal ', '').split()[1]
    await message.answer('–ê–Ω–∞–ª–∏–∑ –ø–æ ' + ticker + '\n' + sum_signals_adv(ticker, time))


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
