# -*- coding: utf8 -*-

# –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π
from utils import *

# –î—Ä—É–≥–∏–µ –ª–∏–±—ã
import sqlite3

# –õ–∏–±—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–ª–µ–≥–æ–π
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher import FSMContext

#CONST
from config import botToken

#–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥
async def set_bot_commands(dp):
    commands = [
        types.BotCommand(command="price", description="[—Ç–∏–∫–µ—Ä –º–æ–Ω–µ—Ç—ã] ‚Äî —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞"),
        types.BotCommand(command="change", description="[—Ç–∏–∫–µ—Ä –º–æ–Ω–µ—Ç—ã] ‚Äî –∏–∑–º–µ–Ω–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –º–æ–Ω–µ—Ç—ã –∑–∞ 24 —á–∞—Å–∞"),
        types.BotCommand(command="list", description="—Å–≤–æ–¥–∫–∞ –æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –º–æ–Ω–µ—Ç–∞—Ö"),
        types.BotCommand(command="add", description="[—Ç–∏–∫–µ—Ä –º–æ–Ω–µ—Ç—ã] ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –º–æ–Ω–µ—Ç—É –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"),
        types.BotCommand(command="remove", description="[—Ç–∏–∫–µ—Ä –º–æ–Ω–µ—Ç—ã] ‚Äî —É–¥–∞–ª–∏—Ç—å –º–æ–Ω–µ—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"),
        types.BotCommand(command="bubbles", description="–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä—ã–Ω–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é"),
        types.BotCommand(command="mood", description="–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ä—ã–Ω–∫–∞ –Ω–∞ –±–∞–∑–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ Bitcoin Rainbow Price Chart "),
        types.BotCommand(command="explorer", description="[–∞–¥—Ä–µ—Å—Å BTC –∫–æ—à–µ–ª—å–∫–∞] - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—à–µ–ª—å–∫–µ –∏ QR –∫–æ–¥"),
        types.BotCommand(command="altindex", description="–∏–Ω–¥–µ–∫—Å —Å–µ–∑–æ–Ω–∞ –∞–ª—å—Ç–∫–æ–∏–Ω–æ–≤"),
        types.BotCommand(command="fear", description="–∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏"),
        types.BotCommand(command="help", description="—Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º")
    ]
    await dp.bot.set_my_commands(commands)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
connect = sqlite3.connect('coins.db')
cursor = connect.cursor()
cursor.execute("""CREATE TABLE IF NOT EXISTS coins(
    ticker TEXT
)""")
connect.commit()
cursor.execute("SELECT * FROM coins")
coins = cursor.fetchall()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞

bot = Bot(token = botToken)
dp = Dispatcher(bot)

# –õ–æ–≥–∏–∫–∞ –±–æ—Ç–∞

@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message, state: FSMContext):
    await set_bot_commands(dp)
    await message.answer("–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É—é /help \n–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ GitHub - github.com/Forwall100/cryptanalyst_bot")

@dp.message_handler(commands="help")
async def send_help(message: types.Message):
    await message.answer('/price [—Ç–∏–∫–µ—Ä –º–æ–Ω–µ—Ç—ã] ‚Äî —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ \n /change [—Ç–∏–∫–µ—Ä –º–æ–Ω–µ—Ç—ã] ‚Äî –∏–∑–º–µ–Ω–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –º–æ–Ω–µ—Ç—ã –∑–∞ 24 —á–∞—Å–∞ \n /list ‚Äî —Å–≤–æ–¥–∫–∞ –æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –º–æ–Ω–µ—Ç–∞—Ö \n /add [—Ç–∏–∫–µ—Ä –º–æ–Ω–µ—Ç—ã] ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –º–æ–Ω–µ—Ç—É –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è \n /remove [—Ç–∏–∫–µ—Ä –º–æ–Ω–µ—Ç—ã] ‚Äî —É–¥–∞–ª–∏—Ç—å –º–æ–Ω–µ—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è \n /bubbles - –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä—ã–Ω–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é \n /mood - –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ä—ã–Ω–∫–∞ –Ω–∞ –±–∞–∑–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ Bitcoin Rainbow Price Chart \n /explorer [–∞–¥—Ä–µ—Å—Å BTC –∫–æ—à–µ–ª—å–∫–∞] - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—à–µ–ª—å–∫–µ –∏ QR –∫–æ–¥ \n /altindex - –ò–Ω–¥–µ–∫—Å —Å–µ–∑–æ–Ω–∞ –∞–ª—å—Ç–∫–æ–∏–Ω–æ–≤ \n /fearAndGreed - –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏')


@dp.message_handler(commands="price", content_types='text')
async def send_price(message: types.Message):
    coin = message.text.replace('/price ', '')
    await message.answer(coin + ' —Å—Ç–æ–∏—Ç ' + str(round(price(coin), 4)) + '$')


@dp.message_handler(commands="change", content_types='text')
async def send_change(message: types.Message):
    coin = message.text.replace('/change ', '')
    if change24(coin) < 0:
        status = 'üìâ —É–ø–∞–ª –Ω–∞ '
    else:
        status = 'üìà –≤—ã—Ä–æ—Å –Ω–∞ '

    await message.answer(coin + status + str(abs(round(change24(coin), 3))) + '%')


@dp.message_handler(commands="list")
async def send_list(message: types.Message):
    cursor.execute("SELECT * FROM coins")
    coins = cursor.fetchall()
    await message.answer('–î–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: ' + dominance())
    for coin in coins:
        coin = coin[0]
        if change24(coin) < 0:
            status = 'üìâ —É–ø–∞–ª –Ω–∞ '
        else:
            status = 'üìà –≤—ã—Ä–æ—Å –Ω–∞ '
        await message.answer(coin + status + str(abs(round(change24(coin), 3))) + '% –∏ —Ç–µ–ø–µ—Ä—å —Å—Ç–æ–∏—Ç ' + str(round(price(coin), 4)) + '$')


@dp.message_handler(commands="add", content_types='text')
async def add_coin(message: types.Message):
    cursor.execute("SELECT * FROM coins")
    coins = cursor.fetchall()

    if (message.text.replace('/add ', ''),) not in coins:
        cursor.execute("INSERT INTO coins VALUES(?);", [message.text.replace('/add ', '')])
        connect.commit()
        await message.answer('–î–æ–±–∞–≤–∏–ª —Ç–∏–∫–µ—Ä –≤ —Å–ø–∏—Å–æ–∫')
    else:
        await message.answer('–≠—Ç–æ—Ç —Ç–∏–∫–µ—Ä —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ')
    

@dp.message_handler(commands="remove", content_types='text')
async def remove_coin(message: types.Message):
    cursor.execute("SELECT * FROM coins")
    coins = cursor.fetchall()

    if (message.text.replace('/remove ', ''),) in coins:
        cursor.execute(f"DELETE FROM coins WHERE ticker = ?", [message.text.replace('/remove ', '')])
        connect.commit()
        await message.answer('–£–¥–∞–ª–∏–ª —Ç–∏–∫–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞')
    else:
        await message.answer('–≠—Ç–æ–≥–æ —Ç–∏–∫–µ—Ä–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ')


@dp.message_handler(commands="mood", content_types='text')
async def mood_answer(message: types.Message):
    await message.answer(mood())


@dp.message_handler(commands="bubbles", content_types='text')
async def bubbles_answer(message: types.Message):
    await bot.send_photo(message.from_user.id, photo=open(bubble(), 'rb'))


@dp.message_handler(commands="fear", content_types='text')
async def mood_answer(message: types.Message):
    await message.answer(fear_and_greed_index()[0] + '\n ' + fear_and_greed_index()[1] + '\n ' + fear_and_greed_index()[2] + '\n ')


@dp.message_handler(commands="explorer", content_types='text')
async def explorer_answer(message: types.Message):
    await message.answer((btc_explorer(message.text.replace('/explorer ', ''))[0] + btc_explorer(message.text.replace('/explorer ', ''))[1] + btc_explorer(message.text.replace('/explorer ', ''))[2]).replace('Balance', '–ë–∞–ª–∞–Ω—Å').replace('Sent', '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ').replace('Received', '–ü–æ–ª—É—á–µ–Ω–æ'))
    await bot.send_photo(message.from_user.id, btc_explorer(message.text.replace('/explorer ', ''))[3])


@dp.message_handler(commands="altindex", content_types='text')
async def alt_answer(message: types.Message):
    await message.answer('–ò–Ω–¥–µ–∫—Å –∞–ª—å—Ç—Å–µ–∑–æ–Ω–∞ —Å–µ–≥–æ–¥–Ω—è - ' + alt_index() + '%')

@dp.message_handler(commands="gas")
async def alt_answer(message: types.Message):
    await message.answer('üöÄ –ë—ã—Å—Ç—Ä–æ - ' + gas()['FastGasPrice'] + ' gwei' + '\nüëå–û–±—ã—á–Ω–æ - ' + gas()['ProposeGasPrice'] + ' gwei' + '\nüê¢ –ú–µ–¥–ª–µ–Ω–Ω–æ - ' + gas()['SafeGasPrice'] + ' gwei')

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)