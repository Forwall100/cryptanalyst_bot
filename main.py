# -*- coding: utf8 -*-

# –î—Ä—É–≥–∏–µ –ª–∏–±—ã
import sqlite3
import shutil

# –°–µ—Ç–µ–≤—ã–µ –ª–∏–±—ã
from requests import Session
from requests.exceptions import ConnectionError, Timeout, TooManyRedirects
import json
import requests
from bs4 import BeautifulSoup
import urllib.request
import urllib.parse
import hashlib

# –õ–∏–±—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–ª–µ–≥–æ–π
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

#CONST
from config import coinMarketCapToken
from config import botToken
from config import screenshotapiToken

#–§—É–Ω–∫—Ü–∏–∏
def change24(asset):
    url = 'https://pro-api.coinmarketcap.com/v1/cryptocurrency/quotes/latest'
    parameters = {
        'symbol': asset
    }
    headers = {
        'Accepts': 'application/json',
        'X-CMC_PRO_API_KEY': coinMarketCapToken,
    }

    session = Session()
    session.headers.update(headers)

    try:
        response = session.get(url, params=parameters)
        data = json.loads(response.text)
        return data['data'][asset]['quote']['USD']['percent_change_24h']
    except (ConnectionError, Timeout, TooManyRedirects) as e:
        return e

def price(asset):
    url = 'https://pro-api.coinmarketcap.com/v1/cryptocurrency/quotes/latest'
    parameters = {
        'symbol': asset
    }
    headers = {
        'Accepts': 'application/json',
        'X-CMC_PRO_API_KEY': coinMarketCapToken,
    }

    session = Session()
    session.headers.update(headers)

    try:
        response = session.get(url, params=parameters)
        data = json.loads(response.text)
        return data['data'][asset]['quote']['USD']['price']
    except (ConnectionError, Timeout, TooManyRedirects) as e:
        return e

def name(asset):
    url = 'https://pro-api.coinmarketcap.com/v1/cryptocurrency/quotes/latest'
    parameters = {
        'symbol': asset
    }
    headers = {
        'Accepts': 'application/json',
        'X-CMC_PRO_API_KEY': coinMarketCapToken,
    }

    session = Session()
    session.headers.update(headers)

    try:
        response = session.get(url, params=parameters)
        data = json.loads(response.text)
        return data['data'][asset]['name']
    except (ConnectionError, Timeout, TooManyRedirects) as e:
        return e

def dominance():
    url = 'https://coinmarketcap.com/ru/'
    response = requests.get(url)
    soup = BeautifulSoup(response.text, 'lxml')
    return(soup.find_all('a', attrs={'href':'/ru/charts/#dominance-percentage'})[0].text)

def mood():
    url = 'https://www.blockchaincenter.net/bitcoin-rainbow-chart/'
    response = requests.get(url)
    soup = BeautifulSoup(response.text, 'lxml')
    legend = soup.find_all('div', attrs={'class':'legend'})
    for child in soup.recursiveChildGenerator():
        if child.name == 'span':
            if len(child.attrs['class']) == 2:
                if child.text == 'Maximum Bubble Territory':
                    return '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—É–∑—ã—Ä—å'
                elif child.text == 'Sell. Seriously, SELL!':
                    return '–ü—Ä–æ–¥–∞–≤–∞–π—Ç–µ. –°–µ—Ä—å–µ–∑–Ω–æ, –ü–†–û–î–ê–í–ê–ô–¢–ï!'
                elif child.text == 'FOMO intensifies':
                    return '–§–æ–º–∞ —É—Å–∏–ª–∏–≤–∞–µ—Ç—Å—è'
                elif child.text == 'Is this a bubble?':
                    return '–≠—Ç–æ –ø—É–∑—ã—Ä—å?'
                elif child.text == 'HODL!':
                    return 'HODL!'
                elif child.text == 'Still cheap':
                    return '–í—Å–µ –µ—â–µ –¥–µ—à–µ–≤–æ'
                elif child.text == 'Accumulate':
                    return '–ù–∞–∫–∞–ø–ª–∏–≤–∞–µ–º'
                elif child.text == 'BUY!':
                    return '–ü–û–ö–£–ü–ê–ï–ú!'
                elif child.text == 'Basically a Fire Sale':
                    return '–û–≥–Ω–µ–Ω–Ω–∞—è —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∞'

def generate_screenshot_api_url(customer_key, secret_phrase, options):
    api_url = 'https://api.screenshotmachine.com/?key=' + customer_key
    if secret_phrase:
        api_url = api_url + '&hash=' + hashlib.md5((options.get('url') + secret_phrase).encode('utf-8')).hexdigest()
    api_url = api_url + '&' + urllib.parse.urlencode(options)
    return api_url

def bubble():
    customer_key = screenshotapiToken
    secret_phrase = ''
    options = {
    'url': 'https://cryptobubbles.net',
    'dimension': '1366x768', 
    'device': 'desktop',
    'format': 'jpg',
    'cacheLimit' : '0',
    'delay' : '4000',
    'zoom' : '100',
    'click': '#CloseCoinzillaHeader'
    }
    url = generate_screenshot_api_url(customer_key, secret_phrase, options)
    file = open('./bubbles.jpg', 'wb')
    file.write(requests.get(url).content)
    file.close()
    return './bubbles.jpg'

def fear_and_greed_index():
    def translate(x):
        if x == 'Fear':
            return '—Å—Ç—Ä–∞—Ö üò±'
        elif x == 'Greed':
            return '–∂–∞–¥–Ω–æ—Å—Ç—å ü§ë'
    url = 'https://alternative.me/crypto/fear-and-greed-index/'
    response = requests.get(url)
    soup = BeautifulSoup(response.text, 'lxml')
    m = []
    historical = soup.find_all('div', attrs={'class':'fng-value'})
    for i in historical:
        if i.text != '':
            m.append(i.text.replace('\n', ' ').split())
    return [('–°–µ–≥–æ–¥–Ω—è ' + translate(m[0][1]) + ' ' + m[0][2]), ('–í—á–µ—Ä–∞ ' + translate(m[1][1]) + ' ' +  m[1][2]), ('–ü—Ä–æ—à–ª–∞—è –Ω–µ–¥–µ–ª—è ' + translate(m[2][2]) + ' ' +  m[2][3])]

def btc_explorer(address):
    url = 'https://live.blockcypher.com/btc/address/' + address
    response = requests.get(url)
    soup = BeautifulSoup(response.text, 'lxml')
    m = []
    for i in soup.find_all('li'):
        if 'RECEIVED' or 'SENT' or 'BALANCE' in i.text:
            m.append(i.text.replace('\n', ' '))
    return [m[-1], m[-2], m[-3], 'https:' + soup.find_all('img')[0]['src']]

def alt_index():
    url = 'https://www.blockchaincenter.net/altcoin-season-index/'
    response = requests.get(url)
    soup = BeautifulSoup(response.text, 'lxml')
    m = []
    for child in soup.find_all('div', attrs={"class":"bccblock"}):
        m.append(child.text.replace('\n', '').replace('%', ''))
    return m[1][22:24]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
connect = sqlite3.connect('coins.db')
cursor = connect.cursor()
cursor.execute("""CREATE TABLE IF NOT EXISTS coins(
    ticker TEXT
)""")
connect.commit()
cursor.execute("SELECT * FROM coins")
coins = cursor.fetchall()

# –õ–æ–≥–∏–∫–∞ –±–æ—Ç–∞
bot = Bot(token = botToken)
dp = Dispatcher(bot)

@dp.message_handler(commands="help")
async def send_help(message: types.Message):
    await message.answer('/price [—Ç–∏–∫–µ—Ä –º–æ–Ω–µ—Ç—ã] ‚Äî —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ \n /change [—Ç–∏–∫–µ—Ä –º–æ–Ω–µ—Ç—ã] ‚Äî –∏–∑–º–µ–Ω–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –º–æ–Ω–µ—Ç—ã –∑–∞ 24 —á–∞—Å–∞ \n /list ‚Äî —Å–≤–æ–¥–∫–∞ –æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –º–æ–Ω–µ—Ç–∞—Ö \n /add [—Ç–∏–∫–µ—Ä –º–æ–Ω–µ—Ç—ã] ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –º–æ–Ω–µ—Ç—É –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è \n /remove [—Ç–∏–∫–µ—Ä –º–æ–Ω–µ—Ç—ã] ‚Äî —É–¥–∞–ª–∏—Ç—å –º–æ–Ω–µ—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è \n /bubbles - –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä—ã–Ω–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é \n /mood - –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ä—ã–Ω–∫–∞ –Ω–∞ –±–∞–∑–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ Bitcoin Rainbow Price Chart \n /explorer [–∞–¥—Ä–µ—Å—Å BTC –∫–æ—à–µ–ª—å–∫–∞] - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—à–µ–ª—å–∫–µ –∏ QR –∫–æ–¥ \n /altindex - –ò–Ω–¥–µ–∫—Å —Å–µ–∑–æ–Ω–∞ –∞–ª—å—Ç–∫–æ–∏–Ω–æ–≤ \n /fearAndGreed - –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏')

@dp.message_handler(commands="price", content_types='text')
async def send_price(message: types.Message):
    coin = message.text.replace('/price ', '')
    await message.answer(coin + ' —Å—Ç–æ–∏—Ç ' + str(round(price(coin), 4)) + '$')

@dp.message_handler(commands="change", content_types='text')
async def send_change(message: types.Message):
    coin = message.text.replace('/change ', '')
    if change24(coin[0]) < 0:
        status = 'üìâ —É–ø–∞–ª –Ω–∞ '
    else:
        status = 'üìà –≤—ã—Ä–æ—Å –Ω–∞ '

    await message.answer(coin[0] + status + str(abs(round(change24(coin[0]), 3))) + '%')

@dp.message_handler(commands="list")
async def send_list(message: types.Message):
    cursor.execute("SELECT * FROM coins")
    coins = cursor.fetchall()
    await message.answer('–î–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: ' + dominance())
    for coin in coins:
        coin = coin[0]
        if change24(coin) < 0:
            status = 'üìâ —É–ø–∞–ª –Ω–∞ '
        else:
            status = 'üìà –≤—ã—Ä–æ—Å –Ω–∞ '
        await message.answer(coin + status + str(abs(round(change24(coin), 3))) + '% –∏ —Ç–µ–ø–µ—Ä—å —Å—Ç–æ–∏—Ç ' + str(round(price(coin), 4)) + '$')

@dp.message_handler(commands="add", content_types='text')
async def add_coin(message: types.Message):
    cursor.execute("SELECT * FROM coins")
    coins = cursor.fetchall()

    if (message.text.replace('/add ', ''),) not in coins:
        cursor.execute("INSERT INTO coins VALUES(?);", [message.text.replace('/add ', '')])
        connect.commit()
        await message.answer('–î–æ–±–∞–≤–∏–ª —Ç–∏–∫–µ—Ä –≤ —Å–ø–∏—Å–æ–∫')
    else:
        await message.answer('–≠—Ç–æ—Ç —Ç–∏–∫–µ—Ä —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ')
    

@dp.message_handler(commands="remove", content_types='text')
async def remove_coin(message: types.Message):
    cursor.execute("SELECT * FROM coins")
    coins = cursor.fetchall()

    if (message.text.replace('/remove ', ''),) in coins:
        cursor.execute(f"DELETE FROM coins WHERE ticker = ?", [message.text.replace('/remove ', '')])
        connect.commit()
        await message.answer('–£–¥–∞–ª–∏–ª —Ç–∏–∫–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞')
    else:
        await message.answer('–≠—Ç–æ–≥–æ —Ç–∏–∫–µ—Ä–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ')

@dp.message_handler(commands="mood", content_types='text')
async def mood_answer(message: types.Message):
    await message.answer(mood())

@dp.message_handler(commands="bubbles", content_types='text')
async def bubbles_answer(message: types.Message):
    await bot.send_photo(message.from_user.id, photo=open(bubble(), 'rb'))

@dp.message_handler(commands="fearAndGreed", content_types='text')
async def mood_answer(message: types.Message):
    await message.answer(fear_and_greed_index()[0] + '\n ' + fear_and_greed_index()[1] + '\n ' + fear_and_greed_index()[2] + '\n ')

@dp.message_handler(commands="explorer", content_types='text')
async def explorer_answer(message: types.Message):
    await message.answer((btc_explorer(message.text.replace('/explorer ', ''))[0] + btc_explorer(message.text.replace('/explorer ', ''))[1] + btc_explorer(message.text.replace('/explorer ', ''))[2]).replace('Balance', '–ë–∞–ª–∞–Ω—Å').replace('Sent', '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ').replace('Received', '–ü–æ–ª—É—á–µ–Ω–æ'))
    await bot.send_photo(message.from_user.id, btc_explorer(message.text.replace('/explorer ', ''))[3])

@dp.message_handler(commands="altindex", content_types='text')
async def alt_answer(message: types.Message):
    await message.answer('–ò–Ω–¥–µ–∫—Å –∞–ª—å—Ç—Å–µ–∑–æ–Ω–∞ —Å–µ–≥–æ–¥–Ω—è - ' + alt_index() + '%')

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)